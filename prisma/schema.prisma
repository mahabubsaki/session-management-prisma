// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Divisons {
  id           Int    @id @default(autoincrement())
  unique_name  String @unique
  name         String
  nameBn       String
  latitude     Float
  longitude    Float
  population   Int
  area         Float
  density      Float
  literacyRate Float
  website      String
}

model User {
  id           Int           @id @default(autoincrement())
  email        String        @unique
  password     String
  name         String
  sessions     Sessions[]
  token        String        @unique
  refreshToken RefreshToken?
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int      @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Sessions {
  id          String @id @default(cuid())
  userId      Int
  sessionId   String @unique
  browser     String
  browserHash String
  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Catetgory {
  id          String   @id @default(cuid())
  name        String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("postCategories")
}

model Post {
  id        String   @id @default(cuid())
  title     String
  content   String
  published Boolean
  upVotes   Int
  views     Int      @default(0)
  updatedAt DateTime @updatedAt

  downVotes Int
  createdAt DateTime @default(now())

  @@index([title, content, createdAt])
}

model Profile {
  id       String   @id @default(cuid())
  username String
  lastSeen DateTime
  userId   Int
  bio      String
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  timestamp DateTime @default(now())
  postId    Int
  userId    Int
}

model PostCategory {
  postId     String
  categoryId String

  @@id([postId, categoryId])
}
